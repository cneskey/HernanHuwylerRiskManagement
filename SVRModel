# Developed by Prof. Hernan Huwyler
# Keywords: SVR, Support Vector Regression, Fines, Delays, Machine Learning, Prediction


import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
import matplotlib.pyplot as plt

# Input data
input_data = [
    ["Winterthur", "Uster", "Dietikon", "Holti", "5C", "Cobitel", "Value", "Manpower", "Fines", "Delays"],
    [1, 0, 0, 1, 0, 0, 230000, 577, 2422, 22],
    [0, 1, 0, 0, 1, 0, 98000, 453, 16929, 66],
    [1, 0, 0, 0, 0, 1, 270000, 550, 3302, 16],
    [0, 1, 0, 0, 1, 0, 540000, 1372, 45403, 44],
    [1, 0, 0, 0, 0, 1, 140000, 489, 2364, 14],
    [0, 0, 1, 0, 0, 1, 158500, 307, 3767, 16],
    [0, 0, 1, 1, 0, 0, 54000, 134, 346, 2],
    [1, 0, 0, 0, 1, 0, 365900, 684, 3400, 64],
    [0, 0, 1, 0, 0, 1, 395000, 1379, 4998, 44],
    [0, 0, 1, 0, 1, 0, 453000, 1146, 5320, 53],
    [1, 0, 0, 1, 0, 0, 480000, 1203, 8977, 44],
    [0, 1, 0, 0, 1, 0, 390000, 1365, 29715, 44]
]

# Convert input data to numpy array
data = np.array(input_data[1:])
labels = np.array(input_data[0])

# Split data into features (X) and targets (y)
X = data[:, :-2]  # Features (excluding "Fines" and "Delays")
y = data[:, -2:]  # Targets ("Fines" and "Delays")

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVR model
svr_fines = SVR(kernel='rbf')
svr_delays = SVR(kernel='rbf')
svr_fines.fit(X_train, y_train[:, 0])
svr_delays.fit(X_train, y_train[:, 1])

# Predictions
y_train_pred_fines = svr_fines.predict(X_train)
y_test_pred_fines = svr_fines.predict(X_test)
y_train_pred_delays = svr_delays.predict(X_train)
y_test_pred_delays = svr_delays.predict(X_test)

# Plotting accuracy charts
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.scatter(y_train[:, 0], y_train_pred_fines, color='blue', label='True vs Predicted (Training)')
plt.scatter(y_test[:, 0], y_test_pred_fines, color='red', label='True vs Predicted (Testing)', alpha=0.5)
plt.xlabel('True Fines')
plt.ylabel('Predicted Fines')
plt.title('Fines')
plt.legend()

plt.subplot(1, 2, 2)
plt.scatter(y_train[:, 1], y_train_pred_delays, color='blue', label='True vs Predicted (Training)')
plt.scatter(y_test[:, 1], y_test_pred_delays, color='red', label='True vs Predicted (Testing)', alpha=0.5)
plt.xlabel('True Delays')
plt.ylabel('Predicted Delays')
plt.title('Delays')
plt.legend()

plt.tight_layout()
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate metrics for fines
mae_fines = mean_absolute_error(y_test[:, 0], y_test_pred_fines)
mse_fines = mean_squared_error(y_test[:, 0], y_test_pred_fines)
rmse_fines = np.sqrt(mse_fines)
r2_fines = r2_score(y_test[:, 0], y_test_pred_fines)

# Calculate metrics for delays
mae_delays = mean_absolute_error(y_test[:, 1], y_test_pred_delays)
mse_delays = mean_squared_error(y_test[:, 1], y_test_pred_delays)
rmse_delays = np.sqrt(mse_delays)
r2_delays = r2_score(y_test[:, 1], y_test_pred_delays)

# Print metrics
print("Metrics for Fines:")
print(f"Mean Absolute Error (MAE): {mae_fines:.2f}")
print(f"Mean Squared Error (MSE): {mse_fines:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse_fines:.2f}")
print(f"R-squared (R2) Score: {r2_fines:.2f}")
print("\nMetrics for Delays:")
print(f"Mean Absolute Error (MAE): {mae_delays:.2f}")
print(f"Mean Squared Error (MSE): {mse_delays:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse_delays:.2f}")
print(f"R-squared (R2) Score: {r2_delays:.2f}")

# New unseen case
new_case = np.array([[0, 1, 0, 0, 1, 0, 440000, 1500]])

# Predict fines and delays
predicted_fines = svr_fines.predict(new_case)
predicted_delays = svr_delays.predict(new_case)

print("Predicted Fines:", predicted_fines[0])
print("Predicted Delays:", predicted_delays[0])
