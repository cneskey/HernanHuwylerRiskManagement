import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report


# Training data
training_data = {
    'Sector': ['Police', 'Sport', 'Defense', 'Police', 'Oil', 'Defense', 'Defense', 'Defense', 'Defense', 'Defense', 'Police', 'Police', 'Defense', 'Defense', 'Sport', 'Sport', 'Sport', 'Defense', 'Defense', 'Police'],
    'Export': ['Firearms', 'Firearms', 'Laser', 'Firearms', 'Explosives', 'Firearms', 'Ammunition', 'Firearms', 'Explosives', 'Explosives', 'Firearms', 'Ammunition', 'Laser', 'Firearms', 'Ammunition', 'Ammunition', 'Firearms', 'Firearms', 'Firearms', 'Ammunition'],
    'Origin': ['Germany', 'Germany', 'Israel', 'Israel', 'Germany', 'Israel', 'Israel', 'Germany', 'Israel', 'Israel', 'Germany', 'Germany', 'Israel', 'Germany', 'Germany', 'Germany', 'Germany', 'Israel', 'Israel', 'Germany'],
    'Destination': ['Switzerland', 'Singapore', 'Turkey', 'Turkey', 'Qatar', 'Cyprus', 'Cyprus', 'Poland', 'Cyprus', 'Cyprus', 'China', 'Austria', 'Lebanon', 'Chad', 'Switzerland', 'Switzerland', 'Denmark', 'Azerbaijan', 'Azerbaijan', 'Poland'],
    'End use': ['Switzerland', 'Singapore', 'Unknown', 'Turkey', 'Qatar', 'Unknown', 'Unknown', 'Poland', 'Unknown', 'Unknown', 'China', 'Austria', 'Lebanon', 'Chad', 'Switzerland', 'Switzerland', 'Denmark', 'Unknown', 'Unknown', 'Poland'],
    'Size': ['Large', 'Small', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Large', 'Small', 'Small', 'Large', 'Large', 'Large', 'Large'],
    'Value': [560000, 150000, 760000, 650000, 980000, 490000, 209000, 674000, 2470000, 1200000, 280000, 390000, 1500000, 765000, 65000, 34000, 38000, 980000, 2300000, 390000],
    'Payment': ['Wire', 'Letter of credit', 'Escrow account', 'Letter of credit', 'Letter of credit', 'Letter of credit', 'Letter of credit', 'Letter of credit', 'Escrow account', 'Escrow account', 'Letter of credit', 'Letter of credit', 'Wire', 'Letter of credit', 'Letter of credit', 'Wire', 'Wire', 'Third-party', 'Third-party', 'Letter of credit'],
    'Route': ['Land', 'Air', 'Air', 'Air', 'Air', 'Sea', 'Sea', 'Land', 'Sea', 'Sea', 'Air', 'Land', 'Sea', 'Air', 'Land', 'Land', 'Land', 'Air', 'Air', 'Land'],
    'Documentation': ['Complete', 'Complete', 'Partial', 'Complete', 'Complete', 'Complete', 'Complete', 'Complete', 'Partial', 'Partial', 'Complete', 'Complete', 'Partial', 'Complete', 'Complete', 'Complete', 'Complete', 'Complete', 'Complete', 'Complete'],
    'DD Compliance': ['Accepted', 'Accepted', 'Rejected', 'Accepted', 'Accepted', 'Conditions', 'Conditions', 'Accepted', 'Rejected', 'Rejected', 'Accepted', 'Accepted', 'Rejected', 'Conditions', 'Accepted', 'Accepted', 'Accepted', 'Conditions', 'Conditions', 'Accepted']
}

# New unseen cases
new_data = {
    'Sector': ['Defense', 'Sport'],
    'Export': ['Explosives', 'Firearms'],
    'Origin': ['Israel', 'Germany'],
    'Destination': ['Cyprus', 'Singapore'],
    'End use': ['Unknown', 'Singapore'],
    'Size': ['Large', 'Small'],
    'Value': [1400000, 100000],
    'Payment': ['Escrow account', 'Letter of credit'],
    'Route': ['Air', 'Land'],
    'Documentation': ['Partial', 'Complete']
}

# Convert data to DataFrame
df = pd.DataFrame(training_data)
new_df = pd.DataFrame(new_data)

# Encode categorical features using LabelEncoder
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])
        if col in new_df.columns:
            new_df[col] = le.transform(new_df[col])

# Print the encoded table for the training data
print("\nEncoded Training Data:")
print(df)

# Print the encoded table for the new unseen cases
print("\nEncoded New Unseen Cases:")
print(new_df)

# Separate features and target variable
X = df.drop('DD Compliance', axis=1)
y = df['DD Compliance']

# Split the data into training and testing sets (20 cases for testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Initialize the Random Forest Classifier
rf_classifier = RandomForestClassifier(random_state=42)

# Train the model
rf_classifier.fit(X_train, y_train)

# Calculate accuracy for training and testing data
train_accuracy = accuracy_score(y_train, rf_classifier.predict(X_train))
test_accuracy = accuracy_score(y_test, rf_classifier.predict(X_test))

# Print the model's accuracy for training and testing data
print(f"\nModel Accuracy on Training Data: {train_accuracy}")
print(f"Model Accuracy on Testing Data: {test_accuracy}")

# Generate a classification report for testing data
classification_report_test = classification_report(y_test, rf_classifier.predict(X_test), target_names=None)
print("\nClassification Report on Testing Data:")
print(classification_report_test)


# Plot accuracy comparison
labels = ['Training Data', 'Testing Data']
accuracies = [train_accuracy, test_accuracy]
plt.bar(labels, accuracies, color=['green', 'blue'])
plt.ylabel('Accuracy')
plt.title('Model Accuracy Comparison')
plt.show()

# Predict on new unseen data
new_predictions = rf_classifier.predict(new_df)

# Interpret the predicted values
new_df['Predicted DD Compliance'] = new_predictions
print("\nPredictions for new unseen cases:")
for index, row in new_df.iterrows():
    predicted_compliance = 'Unknown'
    if row['Predicted DD Compliance'] == 2:
        predicted_compliance = 'Rejected'
    elif row['Predicted DD Compliance'] == 1:
        predicted_compliance = 'Conditions'
    elif row['Predicted DD Compliance'] == 0:
        predicted_compliance = 'Accepted'
    print(f"Case {index}: Sector: {row['Sector']}, Predicted DD Compliance: {predicted_compliance}")
